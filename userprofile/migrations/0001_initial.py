# Generated by Django 5.2.1 on 2025-06-11 14:19

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ActorCategoryChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="AvailabilityChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ChoiceData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choice_type", models.CharField(max_length=50, unique=True)),
                ("choices", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Choice Data",
                "verbose_name_plural": "Choice Data",
            },
        ),
        migrations.CreateModel(
            name="DurationChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="EmploymentStatusChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ExperienceLevelChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="GenderChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="HousingStatusChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="IDTypeChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="LocationData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("region_id", models.CharField(max_length=50, unique=True)),
                ("region_name", models.CharField(max_length=100)),
                ("cities", models.JSONField()),
            ],
            options={
                "verbose_name": "Location Data",
                "verbose_name_plural": "Location Data",
            },
        ),
        migrations.CreateModel(
            name="MaritalStatusChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="NationalityChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ProfessionalChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_sizes", models.JSONField(default=list)),
                ("industries", models.JSONField(default=list)),
                ("leadership_styles", models.JSONField(default=list)),
                ("communication_styles", models.JSONField(default=list)),
                ("motivations", models.JSONField(default=list)),
            ],
            options={
                "verbose_name": "Professional Choices",
                "verbose_name_plural": "Professional Choices",
            },
        ),
        migrations.CreateModel(
            name="ShiftChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="SkillsChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="WorkLocationChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="YearsChoices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("choices", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                (
                    "birthdate",
                    models.DateField(
                        blank=True, help_text="Date of birth (required)", null=True
                    ),
                ),
                ("profession", models.CharField(max_length=50)),
                (
                    "nationality",
                    models.CharField(
                        help_text="Nationality (required)", max_length=100
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("availability_status", models.BooleanField(default=True)),
                ("verified", models.BooleanField(default=False)),
                ("flagged", models.BooleanField(default=False)),
                ("status", models.CharField(blank=True, max_length=50)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProfessionalQualifications",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "professions",
                    models.JSONField(
                        default=list,
                        help_text="Selected professions (minimum 1 required)",
                    ),
                ),
                (
                    "actor_category",
                    models.CharField(
                        blank=True,
                        help_text="Category of acting experience",
                        max_length=50,
                    ),
                ),
                (
                    "model_categories",
                    models.JSONField(
                        default=list, help_text="Selected model categories"
                    ),
                ),
                (
                    "performer_categories",
                    models.JSONField(
                        default=list, help_text="Selected performer categories"
                    ),
                ),
                (
                    "influencer_categories",
                    models.JSONField(
                        default=list, help_text="Selected influencer categories"
                    ),
                ),
                (
                    "min_salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum expected salary",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "max_salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum expected salary",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("skills", models.JSONField(default=list, help_text="Selected skills")),
                (
                    "skill_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of skills (required for Stuntman)",
                    ),
                ),
                (
                    "video_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to showcase video (required for Stuntman)",
                    ),
                ),
                (
                    "main_skill",
                    models.CharField(
                        blank=True,
                        help_text="Primary skill (required for stuntman)",
                        max_length=50,
                    ),
                ),
                (
                    "experience_level",
                    models.CharField(
                        help_text="Experience level (required)", max_length=50
                    ),
                ),
                (
                    "years_of_experience",
                    models.CharField(
                        blank=True,
                        help_text="Years of experience (required)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "availability",
                    models.CharField(
                        help_text="Availability (required)", max_length=50
                    ),
                ),
                (
                    "employment_status",
                    models.CharField(
                        blank=True,
                        help_text="Employment status (required)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "preferred_work_location",
                    models.CharField(
                        help_text="Preferred work location (required)", max_length=50
                    ),
                ),
                (
                    "shift_preference",
                    models.CharField(
                        help_text="Shift preference (required)", max_length=50
                    ),
                ),
                ("willingness_to_relocate", models.BooleanField(default=False)),
                ("overtime_availability", models.BooleanField(default=False)),
                ("travel_willingness", models.BooleanField(default=False)),
                ("software_proficiency", models.JSONField(default=list)),
                ("typing_speed", models.IntegerField(blank=True, null=True)),
                ("driving_skills", models.BooleanField(default=False)),
                ("equipment_experience", models.JSONField(default=list)),
                ("role_title", models.CharField(max_length=100)),
                ("portfolio_url", models.URLField(blank=True, null=True)),
                ("union_membership", models.BooleanField(default=False)),
                ("reference", models.TextField(blank=True, null=True)),
                ("available_start_date", models.DateField(blank=True, null=True)),
                (
                    "preferred_company_size",
                    models.CharField(help_text="Preferred company size", max_length=50),
                ),
                (
                    "preferred_industry",
                    models.CharField(help_text="Preferred industry", max_length=50),
                ),
                (
                    "leadership_style",
                    models.CharField(help_text="Leadership style", max_length=50),
                ),
                (
                    "communication_style",
                    models.CharField(help_text="Communication style", max_length=50),
                ),
                ("motivation", models.CharField(help_text="Motivation", max_length=50)),
                ("has_driving_license", models.BooleanField(default=False)),
                ("work_authorization", models.CharField(max_length=50)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="professional_qualifications",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PhysicalAttributes",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Weight in kilograms",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                30, message="Weight must be at least 30 kg"
                            ),
                            django.core.validators.MaxValueValidator(
                                500, message="Weight cannot exceed 500 kg"
                            ),
                        ],
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Height in centimeters",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                100, message="Height must be at least 100 cm"
                            ),
                            django.core.validators.MaxValueValidator(
                                300, message="Height cannot exceed 300 cm"
                            ),
                        ],
                    ),
                ),
                (
                    "gender",
                    models.CharField(help_text="Gender (required)", max_length=20),
                ),
                (
                    "hair_color",
                    models.CharField(help_text="Hair color (required)", max_length=50),
                ),
                (
                    "eye_color",
                    models.CharField(help_text="Eye color (required)", max_length=50),
                ),
                (
                    "body_type",
                    models.CharField(help_text="Body type (required)", max_length=50),
                ),
                (
                    "skin_tone",
                    models.CharField(help_text="Skin tone (required)", max_length=50),
                ),
                ("facial_hair", models.CharField(blank=True, max_length=50)),
                ("tattoos_visible", models.BooleanField(default=False)),
                ("piercings_visible", models.BooleanField(default=False)),
                ("physical_condition", models.CharField(blank=True, max_length=50)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="physical_attributes",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonalInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        help_text="Marital status (required)", max_length=50
                    ),
                ),
                ("ethnicity", models.CharField(blank=True, max_length=50)),
                ("personality_type", models.CharField(blank=True, max_length=50)),
                ("work_preference", models.CharField(blank=True, max_length=50)),
                (
                    "hobbies",
                    models.JSONField(
                        default=list, help_text="List of hobbies (required)"
                    ),
                ),
                (
                    "custom_hobby",
                    models.CharField(
                        blank=True,
                        help_text="Custom hobby (required)",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("volunteer_experience", models.CharField(blank=True, max_length=50)),
                (
                    "company_culture_preference",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "social_media",
                    models.JSONField(
                        default=list,
                        help_text="List of social media accounts with usernames and followers",
                    ),
                ),
                (
                    "other_social_media",
                    models.JSONField(
                        default=list,
                        help_text="List of other social media platforms not in the predefined list",
                    ),
                ),
                (
                    "language_proficiency",
                    models.JSONField(
                        default=list,
                        help_text="List of languages and proficiency levels (required)",
                    ),
                ),
                ("special_skills", models.JSONField(default=list)),
                ("tools_experience", models.JSONField(default=list)),
                ("award_recognitions", models.JSONField(default=list)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personal_info",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MedicalInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "health_conditions",
                    models.JSONField(
                        default=list, help_text="List of health conditions (required)"
                    ),
                ),
                (
                    "medications",
                    models.JSONField(
                        default=list, help_text="List of medications (required)"
                    ),
                ),
                ("disability_status", models.CharField(blank=True, max_length=50)),
                (
                    "disability_type",
                    models.CharField(blank=True, default="None", max_length=50),
                ),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="medical_info",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Media",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "video",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="profile_videos/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["mp4", "avi", "mov", "mkv"]
                            )
                        ],
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        help_text="Professional headshot (required). Must be JPG/PNG format, minimum 800px width, maximum 2000px width.",
                        null=True,
                        upload_to="profile_photos/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png"]
                            ),
                            django.core.validators.MinValueValidator(
                                800, message="Image width must be at least 800 pixels"
                            ),
                            django.core.validators.MaxValueValidator(
                                2000, message="Image width must not exceed 2000 pixels"
                            ),
                        ],
                    ),
                ),
                (
                    "natural_photo_1",
                    models.ImageField(
                        blank=True,
                        help_text="First natural photo (required). Must be JPG/PNG format, minimum 800px width, maximum 2000px width.",
                        null=True,
                        upload_to="natural_photos/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png"]
                            ),
                            django.core.validators.MinValueValidator(
                                800, message="Image width must be at least 800 pixels"
                            ),
                            django.core.validators.MaxValueValidator(
                                2000, message="Image width must not exceed 2000 pixels"
                            ),
                        ],
                    ),
                ),
                (
                    "natural_photo_2",
                    models.ImageField(
                        blank=True,
                        help_text="Second natural photo (required). Must be JPG/PNG format, minimum 800px width, maximum 2000px width.",
                        null=True,
                        upload_to="natural_photos/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png"]
                            ),
                            django.core.validators.MinValueValidator(
                                800, message="Image width must be at least 800 pixels"
                            ),
                            django.core.validators.MaxValueValidator(
                                2000, message="Image width must not exceed 2000px width"
                            ),
                        ],
                    ),
                ),
                ("photo_processed", models.BooleanField(default=False)),
                ("natural_photo_1_processed", models.BooleanField(default=False)),
                ("natural_photo_2_processed", models.BooleanField(default=False)),
                ("last_cleanup", models.DateTimeField(blank=True, null=True)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IdentityVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "id_type",
                    models.CharField(
                        help_text="Type of identification document", max_length=50
                    ),
                ),
                ("id_number", models.CharField(blank=True, max_length=50)),
                ("id_expiry_date", models.DateField(blank=True, null=True)),
                (
                    "id_front",
                    models.ImageField(
                        blank=True,
                        help_text="Front photo of ID document",
                        null=True,
                        upload_to="id_fronts/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png", "gif"]
                            )
                        ],
                    ),
                ),
                (
                    "id_back",
                    models.ImageField(
                        blank=True,
                        help_text="Back photo of ID document",
                        null=True,
                        upload_to="id_backs/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png", "gif"]
                            )
                        ],
                    ),
                ),
                ("id_verified", models.BooleanField(default=False)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identity_verification",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Education",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("education_level", models.CharField(blank=True, max_length=50)),
                ("degree_type", models.CharField(blank=True, max_length=50)),
                ("field_of_study", models.CharField(blank=True, max_length=100)),
                ("graduation_year", models.CharField(blank=True, max_length=4)),
                ("gpa", models.FloatField(blank=True, null=True)),
                ("institution_name", models.CharField(blank=True, max_length=100)),
                ("scholarships", models.JSONField(default=list)),
                ("academic_achievements", models.JSONField(default=list)),
                ("certifications", models.JSONField(default=list)),
                ("online_courses", models.JSONField(default=list)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="education",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ContactInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=255)),
                ("specific_area", models.CharField(max_length=100)),
                ("city", models.CharField(max_length=100)),
                ("region", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=2)),
                (
                    "housing_status",
                    models.CharField(
                        choices=[
                            ("owned", "Owned"),
                            ("rented", "Rented"),
                            ("living_with_family", "Living with Family"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "residence_duration",
                    models.CharField(
                        choices=[
                            ("less_than_1_year", "Less than 1 year"),
                            ("1_to_3_years", "1 to 3 years"),
                            ("3_to_5_years", "3 to 5 years"),
                            ("more_than_5_years", "More than 5 years"),
                        ],
                        max_length=50,
                    ),
                ),
                ("emergency_contact", models.CharField(max_length=100)),
                ("emergency_phone", models.CharField(max_length=20)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_info",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VerificationAuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("previous_status", models.BooleanField()),
                ("new_status", models.BooleanField()),
                ("changed_at", models.DateTimeField(auto_now_add=True)),
                ("verification_type", models.CharField(max_length=50)),
                ("verification_method", models.CharField(max_length=50)),
                ("notes", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "changed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verification_logs",
                        to="userprofile.profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Verification Audit Log",
                "verbose_name_plural": "Verification Audit Logs",
                "ordering": ["-changed_at"],
            },
        ),
        migrations.CreateModel(
            name="VerificationStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("verification_type", models.CharField(max_length=50)),
                ("verification_date", models.DateTimeField(auto_now_add=True)),
                ("verification_method", models.CharField(max_length=50)),
                ("verification_notes", models.TextField(blank=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verification_status",
                        to="userprofile.profile",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WorkExperience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("years_of_experience", models.CharField(blank=True, max_length=50)),
                ("employment_status", models.CharField(blank=True, max_length=50)),
                ("previous_employers", models.JSONField(default=list)),
                ("projects", models.JSONField(default=list)),
                ("training", models.JSONField(default=list)),
                ("internship_experience", models.CharField(blank=True, max_length=50)),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="work_experience",
                        to="userprofile.profile",
                    ),
                ),
            ],
        ),
    ]
