# Generated by Django 5.2 on 2025-05-30 08:24

from django.db import migrations, models, connection
import django.core.validators


def drop_contactinfo_table(apps, schema_editor):
    if connection.vendor == 'postgresql':
        schema_editor.execute('DROP TABLE IF EXISTS userprofile_contactinfo CASCADE;')
    else:
        schema_editor.execute('DROP TABLE IF EXISTS userprofile_contactinfo;')

def set_not_null_constraints(apps, schema_editor):
    if connection.vendor == 'postgresql':
        schema_editor.execute("""
            ALTER TABLE userprofile_contactinfo 
                ALTER COLUMN address SET NOT NULL,
                ALTER COLUMN specific_area SET NOT NULL,
                ALTER COLUMN city SET NOT NULL,
                ALTER COLUMN region SET NOT NULL,
                ALTER COLUMN country SET NOT NULL,
                ALTER COLUMN housing_status SET NOT NULL,
                ALTER COLUMN residence_duration SET NOT NULL,
                ALTER COLUMN emergency_contact SET NOT NULL,
                ALTER COLUMN emergency_phone SET NOT NULL;
        """)

class Migration(migrations.Migration):

    dependencies = [
        ("userprofile", "0007_auto_20250530_0821"),
    ]

    operations = [
        # First, preserve existing data
        migrations.RunSQL(
            sql="""
            CREATE TABLE userprofile_contactinfo_backup AS 
            SELECT * FROM userprofile_contactinfo;
            """,
            reverse_sql="DROP TABLE IF EXISTS userprofile_contactinfo_backup;"
        ),

        # Drop the existing table and its constraints (cross-db compatible)
        migrations.RunPython(drop_contactinfo_table),

        # Create the new table with proper fields
        migrations.CreateModel(
            name='ContactInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(help_text='Address (required)', max_length=200)),
                ('specific_area', models.CharField(help_text='Specific area (required)', max_length=200)),
                ('city', models.CharField(help_text='City (required)', max_length=100)),
                ('region', models.CharField(help_text='Region (required)', max_length=50)),
                ('country', models.CharField(default='ET', help_text='Country (required)', max_length=2)),
                ('housing_status', models.CharField(
                    choices=[
                        ('own', 'Own'),
                        ('rent', 'Rent'),
                        ('live_with_family', 'Live with Family'),
                        ('other', 'Other')
                    ],
                    help_text='Housing status (required)',
                    max_length=50
                )),
                ('residence_duration', models.CharField(
                    choices=[
                        ('less_than_1', '<1 year'),
                        ('1_to_3', '1-3 years'),
                        ('3_to_5', '3-5 years'),
                        ('5_to_10', '5-10 years'),
                        ('more_than_10', '>10 years')
                    ],
                    help_text='Duration of residence (required)',
                    max_length=50
                )),
                ('emergency_contact', models.CharField(help_text='Emergency contact name (required)', max_length=100)),
                ('emergency_phone', models.CharField(
                    help_text='Emergency contact phone number starting with +251 followed by 9 digits (required)',
                    max_length=17,
                    validators=[
                        django.core.validators.RegexValidator(
                            message='Phone number must start with +251 followed by exactly 9 digits.',
                            regex='^\\+251\\d{9}$'
                        )
                    ]
                )),
                ('profile', models.OneToOneField(
                    on_delete=models.CASCADE,
                    related_name='contact_info',
                    to='userprofile.profile'
                )),
            ],
        ),

        # Restore data from backup with PostgreSQL syntax
        migrations.RunSQL(
            sql="""
            INSERT INTO userprofile_contactinfo (
                id, profile_id, address, specific_area, city, region, country,
                housing_status, residence_duration, emergency_contact, emergency_phone
            )
            SELECT 
                id, profile_id,
                COALESCE(address, ''),
                COALESCE(specific_area, ''),
                COALESCE(city, ''),
                COALESCE(region, ''),
                COALESCE(country, 'ET'),
                COALESCE(housing_status, 'rent'),
                COALESCE(residence_duration, 'less_than_1'),
                COALESCE(emergency_contact, ''),
                COALESCE(emergency_phone, '+251900000000')
            FROM userprofile_contactinfo_backup;
            """,
            reverse_sql=""
        ),

        # Drop the backup table
        migrations.RunSQL(
            sql="DROP TABLE IF EXISTS userprofile_contactinfo_backup;",
            reverse_sql=""
        ),

        migrations.RunPython(set_not_null_constraints),
    ]
